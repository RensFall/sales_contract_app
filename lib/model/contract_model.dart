// lib/model/contract_model.dart
enum ContractStatus {
  draft,
  pendingSignatures,
  signed,
  pendingPayment,
  pendingDepartment, // New status for department approval
  pendingApproval,
  approved,
  cancelled,
}

class ContractModel {
  final String id;
  final String contractNumber; // رقم العقد
  final String sellerId;
  final String buyerId;
  final List<String> witnessIds;
  final ContractStatus status;
  final DateTime createdAt;
  final DateTime? signedAt;
  final DateTime? paidAt;
  final DateTime? approvedAt;
  final String? finalPdfUrl;
  final String? adminStampUrl;

  // Contract Details - Arabic format
  final Map<String, dynamic> sellerDetails;
  final Map<String, dynamic> buyerDetails;
  final BoatDetails boatDetails;
  final double saleAmount;
  final String saleAmountText; // المبلغ كتابة
  final String paymentMethod;
  final Map<String, dynamic> additionalTerms;
  final String saleLocation;
  final DateTime saleDate;

  // Signatures - Simplified
  final Map<String, SignatureData> signatures;

  // Payment Details
  final PaymentData? paymentData;

  // Department Approval Workflow
  final bool sentToDepartment;
  final DateTime? sentToDepartmentAt;
  final String? departmentApprovedPdfUrl;
  final DateTime? departmentApprovedAt;
  final String? generatedPdfUrl; // PDF generated by admin

  // Admin Details
  final String? adminId;
  final String? adminNotes;

  // Participants array for easier querying
  List<String> get participants => [sellerId, buyerId, ...witnessIds];

  ContractModel({
    required this.id,
    required this.contractNumber,
    required this.sellerId,
    required this.buyerId,
    required this.witnessIds,
    required this.status,
    required this.createdAt,
    this.signedAt,
    this.paidAt,
    this.approvedAt,
    this.finalPdfUrl,
    this.adminStampUrl,
    required this.sellerDetails,
    required this.buyerDetails,
    required this.boatDetails,
    required this.saleAmount,
    required this.saleAmountText,
    required this.paymentMethod,
    required this.additionalTerms,
    required this.saleLocation,
    required this.saleDate,
    required this.signatures,
    this.paymentData,
    this.sentToDepartment = false,
    this.sentToDepartmentAt,
    this.departmentApprovedPdfUrl,
    this.departmentApprovedAt,
    this.generatedPdfUrl,
    this.adminId,
    this.adminNotes,
  });

  factory ContractModel.fromMap(Map<String, dynamic> map) {
    return ContractModel(
      id: map['id'] ?? '',
      contractNumber: map['contractNumber'] ?? '',
      sellerId: map['sellerId'] ?? '',
      buyerId: map['buyerId'] ?? '',
      witnessIds: List<String>.from(map['witnessIds'] ?? []),
      status: ContractStatus.values[map['status'] ?? 0],
      createdAt: DateTime.parse(map['createdAt']),
      signedAt:
          map['signedAt'] != null ? DateTime.parse(map['signedAt']) : null,
      paidAt: map['paidAt'] != null ? DateTime.parse(map['paidAt']) : null,
      approvedAt:
          map['approvedAt'] != null ? DateTime.parse(map['approvedAt']) : null,
      finalPdfUrl: map['finalPdfUrl'],
      adminStampUrl: map['adminStampUrl'],
      sellerDetails: Map<String, dynamic>.from(map['sellerDetails'] ?? {}),
      buyerDetails: Map<String, dynamic>.from(map['buyerDetails'] ?? {}),
      boatDetails: BoatDetails.fromMap(map['boatDetails'] ?? {}),
      saleAmount: map['saleAmount'] is String
          ? double.tryParse(map['saleAmount']) ?? 0.0
          : (map['saleAmount'] ?? 0).toDouble(),
      saleAmountText: map['saleAmountText'] ?? '',
      paymentMethod: map['paymentMethod'] ?? '',
      additionalTerms: Map<String, dynamic>.from(map['additionalTerms'] ?? {}),
      saleLocation: map['saleLocation'] ?? '',
      saleDate: DateTime.parse(map['saleDate']),
      signatures: (map['signatures'] as Map<String, dynamic>?)?.map(
            (key, value) => MapEntry(key, SignatureData.fromMap(value)),
          ) ??
          {},
      paymentData: map['paymentData'] != null
          ? PaymentData.fromMap(map['paymentData'])
          : null,
      sentToDepartment: map['sentToDepartment'] ?? false,
      sentToDepartmentAt: map['sentToDepartmentAt'] != null
          ? DateTime.parse(map['sentToDepartmentAt'])
          : null,
      departmentApprovedPdfUrl: map['departmentApprovedPdfUrl'],
      departmentApprovedAt: map['departmentApprovedAt'] != null
          ? DateTime.parse(map['departmentApprovedAt'])
          : null,
      generatedPdfUrl: map['generatedPdfUrl'],
      adminId: map['adminId'],
      adminNotes: map['adminNotes'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'contractNumber': contractNumber,
      'sellerId': sellerId,
      'buyerId': buyerId,
      'witnessIds': witnessIds,
      'status': status.index,
      'createdAt': createdAt.toIso8601String(),
      'signedAt': signedAt?.toIso8601String(),
      'paidAt': paidAt?.toIso8601String(),
      'approvedAt': approvedAt?.toIso8601String(),
      'finalPdfUrl': finalPdfUrl,
      'adminStampUrl': adminStampUrl,
      'sellerDetails': sellerDetails,
      'buyerDetails': buyerDetails,
      'boatDetails': boatDetails.toMap(),
      'saleAmount': saleAmount,
      'saleAmountText': saleAmountText,
      'paymentMethod': paymentMethod,
      'additionalTerms': additionalTerms,
      'saleLocation': saleLocation,
      'saleDate': saleDate.toIso8601String(),
      'signatures':
          signatures.map((key, value) => MapEntry(key, value.toMap())),
      'paymentData': paymentData?.toMap(),
      'sentToDepartment': sentToDepartment,
      'sentToDepartmentAt': sentToDepartmentAt?.toIso8601String(),
      'departmentApprovedPdfUrl': departmentApprovedPdfUrl,
      'departmentApprovedAt': departmentApprovedAt?.toIso8601String(),
      'generatedPdfUrl': generatedPdfUrl,
      'adminId': adminId,
      'adminNotes': adminNotes,
      'participants': participants,
    };
  }

  // Add copyWith method directly in the model
  ContractModel copyWith({
    String? generatedPdfUrl,
    String? departmentApprovedPdfUrl,
    bool? sentToDepartment,
    DateTime? sentToDepartmentAt,
    ContractStatus? status,
  }) {
    return ContractModel(
      id: id,
      contractNumber: contractNumber,
      sellerId: sellerId,
      buyerId: buyerId,
      witnessIds: witnessIds,
      status: status ?? this.status,
      createdAt: createdAt,
      signedAt: signedAt,
      paidAt: paidAt,
      approvedAt: approvedAt,
      finalPdfUrl: finalPdfUrl,
      adminStampUrl: adminStampUrl,
      sellerDetails: sellerDetails,
      buyerDetails: buyerDetails,
      boatDetails: boatDetails,
      saleAmount: saleAmount,
      saleAmountText: saleAmountText,
      paymentMethod: paymentMethod,
      additionalTerms: additionalTerms,
      saleLocation: saleLocation,
      saleDate: saleDate,
      signatures: signatures,
      paymentData: paymentData,
      sentToDepartment: sentToDepartment ?? this.sentToDepartment,
      sentToDepartmentAt: sentToDepartmentAt ?? this.sentToDepartmentAt,
      departmentApprovedPdfUrl:
          departmentApprovedPdfUrl ?? this.departmentApprovedPdfUrl,
      departmentApprovedAt: departmentApprovedAt,
      generatedPdfUrl: generatedPdfUrl ?? this.generatedPdfUrl,
      adminId: adminId,
      adminNotes: adminNotes,
    );
  }
}

class BoatDetails {
  final String vesselName; // اسم الوحدة
  final String registrationNumber; // رقم القيد
  final DateTime? registrationDate; // تاريخ القيد
  final String workNature; // طبيعة العمل
  final double length; // الطول
  final double width; // العرض
  final double depth; // العمق
  final double capacity; // الحمولة
  final String buildMaterial; // مادة البناء
  final String workArea; // منطقة العمل
  final String hullNumber; // رقم الهيكل
  final int passengerCount; // عدد الركاب
  final List<EngineDetail> engines; // المحركات
  final EquipmentDetails equipment; // الأجهزة

  BoatDetails({
    required this.vesselName,
    required this.registrationNumber,
    this.registrationDate,
    required this.workNature,
    required this.length,
    required this.width,
    required this.depth,
    required this.capacity,
    required this.buildMaterial,
    required this.workArea,
    required this.hullNumber,
    required this.passengerCount,
    required this.engines,
    required this.equipment,
  });

  factory BoatDetails.fromMap(Map<String, dynamic> map) {
    return BoatDetails(
      vesselName: map['vesselName'] ?? '',
      registrationNumber: map['registrationNumber'] ?? '',
      registrationDate: map['registrationDate'] != null
          ? DateTime.parse(map['registrationDate'])
          : null,
      workNature: map['workNature'] ?? 'نقل ركاب',
      length: map['length'] is String
          ? double.tryParse(map['length']) ?? 0.0
          : (map['length'] ?? 0).toDouble(),
      width: map['width'] is String
          ? double.tryParse(map['width']) ?? 0.0
          : (map['width'] ?? 0).toDouble(),
      depth: map['depth'] is String
          ? double.tryParse(map['depth']) ?? 0.0
          : (map['depth'] ?? 0).toDouble(),
      capacity: map['capacity'] is String
          ? double.tryParse(map['capacity']) ?? 0.0
          : (map['capacity'] ?? 0).toDouble(),
      buildMaterial: map['buildMaterial'] ?? '',
      workArea: map['workArea'] ?? '',
      hullNumber: map['hullNumber'] ?? '',
      passengerCount: map['passengerCount'] is String
          ? int.tryParse(map['passengerCount']) ?? 0
          : map['passengerCount'] ?? 0,
      engines: (map['engines'] as List?)
              ?.map((e) => EngineDetail.fromMap(e))
              .toList() ??
          [],
      equipment: map['equipment'] != null
          ? EquipmentDetails.fromMap(map['equipment'])
          : EquipmentDetails.empty(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'vesselName': vesselName,
      'registrationNumber': registrationNumber,
      'registrationDate': registrationDate?.toIso8601String(),
      'workNature': workNature,
      'length': length,
      'width': width,
      'depth': depth,
      'capacity': capacity,
      'buildMaterial': buildMaterial,
      'workArea': workArea,
      'hullNumber': hullNumber,
      'passengerCount': passengerCount,
      'engines': engines.map((e) => e.toMap()).toList(),
      'equipment': equipment.toMap(),
    };
  }
}

class EngineDetail {
  final String type; // نوع المحرك
  final String horsepower; // قدرتها بالحصان
  final String serialNumber; // الرقم التسلسلي

  EngineDetail({
    required this.type,
    required this.horsepower,
    required this.serialNumber,
  });

  factory EngineDetail.fromMap(Map<String, dynamic> map) {
    return EngineDetail(
      type: map['type'] ?? '',
      horsepower: map['horsepower'] ?? '',
      serialNumber: map['serialNumber'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'type': type,
      'horsepower': horsepower,
      'serialNumber': serialNumber,
    };
  }
}

class EquipmentDetails {
  final String marineId; // رقم الهوية البحرية
  final String callSign; // إشارة النداء
  final bool hasAIS; // جهاز التتبع
  final bool hasVHF; // جهاز اللاسلكي
  final bool hasEPIRB; // جهاز الاستغاثة
  final bool hasDepthFinder; // جهاز الأعماق

  EquipmentDetails({
    required this.marineId,
    required this.callSign,
    required this.hasAIS,
    required this.hasVHF,
    required this.hasEPIRB,
    required this.hasDepthFinder,
  });

  factory EquipmentDetails.fromMap(Map<String, dynamic> map) {
    return EquipmentDetails(
      marineId: map['marineId'] ?? '',
      callSign: map['callSign'] ?? '',
      hasAIS: map['hasAIS'] ?? false,
      hasVHF: map['hasVHF'] ?? false,
      hasEPIRB: map['hasEPIRB'] ?? false,
      hasDepthFinder: map['hasDepthFinder'] ?? false,
    );
  }

  factory EquipmentDetails.empty() {
    return EquipmentDetails(
      marineId: '',
      callSign: '',
      hasAIS: false,
      hasVHF: false,
      hasEPIRB: false,
      hasDepthFinder: false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'marineId': marineId,
      'callSign': callSign,
      'hasAIS': hasAIS,
      'hasVHF': hasVHF,
      'hasEPIRB': hasEPIRB,
      'hasDepthFinder': hasDepthFinder,
    };
  }
}

class SignatureData {
  final String userId;
  final DateTime signedAt;
  final String? signatureImageUrl; // URL to the signature image
  final String? ipAddress;
  final String? deviceInfo;
  final bool isVerified;

  SignatureData({
    required this.userId,
    required this.signedAt,
    this.signatureImageUrl,
    this.ipAddress,
    this.deviceInfo,
    required this.isVerified,
  });

  factory SignatureData.fromMap(Map<String, dynamic> map) {
    return SignatureData(
      userId: map['userId'] ?? '',
      signedAt: DateTime.parse(map['signedAt']),
      signatureImageUrl: map['signatureImageUrl'] ?? map['signatureUrl'],
      ipAddress: map['ipAddress'],
      deviceInfo: map['deviceInfo'],
      isVerified: map['isVerified'] ?? map['agreedToTerms'] ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'userId': userId,
      'signedAt': signedAt.toIso8601String(),
      'signatureImageUrl': signatureImageUrl,
      'ipAddress': ipAddress,
      'deviceInfo': deviceInfo,
      'isVerified': isVerified,
    };
  }
}

class PaymentData {
  final String transactionId;
  final double amount;
  final String paymentMethod;
  final String? receiptUrl;
  final DateTime paidAt;
  final bool isVerified;

  PaymentData({
    required this.transactionId,
    required this.amount,
    required this.paymentMethod,
    this.receiptUrl,
    required this.paidAt,
    required this.isVerified,
  });

  factory PaymentData.fromMap(Map<String, dynamic> map) {
    return PaymentData(
      transactionId: map['transactionId'] ?? '',
      amount: map['amount'] is String
          ? double.tryParse(map['amount']) ?? 0.0
          : (map['amount'] ?? 0).toDouble(),
      paymentMethod: map['paymentMethod'] ?? '',
      receiptUrl: map['receiptUrl'],
      paidAt: DateTime.parse(map['paidAt']),
      isVerified: map['isVerified'] ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'transactionId': transactionId,
      'amount': amount,
      'paymentMethod': paymentMethod,
      'receiptUrl': receiptUrl,
      'paidAt': paidAt.toIso8601String(),
      'isVerified': isVerified,
    };
  }
}
